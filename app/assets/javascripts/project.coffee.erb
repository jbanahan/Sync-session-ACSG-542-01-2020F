projectApp = angular.module('ProjectApp',['ChainComponents'])
projectApp.factory 'projectSvc', ['$http',($http) ->
  handleProjectSave = (svc,project,promise) ->
    project.saving = true
    promise.then(((resp) ->
      svc.project = resp.data.project
    ),((resp) ->
      project.saving = undefined
      svc.errorMessage = resp.data.error
    ))

  disableProjectSaving = (project) ->

  return {
    project: null
    loadingMessage: null
    errorMessage: null
    load: (projectId) ->
      svc = @
      svc.loadingMessage = 'Loading...'
      $http.get('/projects/'+projectId+'.json').then(((resp) ->
        svc.project = resp.data.project
        svc.loadingMessage = null
      ),((resp) ->
        svc.errorMessage = resp.data.error
        svc.loadingMessage = null
      ))

    saveProject: (project) ->
      svc = @
      promise = $http.put('/projects/'+project.id+'.json',{project:project})
      handleProjectSave svc, project, promise

    addProjectUpdate: (project,body) ->
      svc = @
      project.saving = true
      $http.post('/projects/'+project.id+'/project_updates.json',{project_update:{body:body}}).then(((resp) ->
        project.project_updates ?= []
        project.project_updates.unshift resp.data.project_update
        project.saving = null
      ),((resp)->
        project.saving = null
        svc.errorMessage = resp.data.error
      ))

    editProjectUpdate: (project,projectUpdate) ->
      svc = @
      projectUpdate.saving = true
      $http.put('/projects/'+project.id+'/project_updates/'+projectUpdate.id+'.json',{project_update:projectUpdate}).then(((resp) ->
        update = resp.data.project_update
        project.project_updates ?= []
        for pu, i in project.project_updates
          project.project_updates[i] = update if pu.id == update.id
      ),((resp) ->
        projectUpdate.saving = null
        svc.errorMessage = resp.data.error
      ))

    saveDeliverable: (project,deliverable) ->
      svc = @
      deliverable.saving = true
      promise = null
      if deliverable.id == undefined
        deliverable.id = new Date().getTime()
        promise = $http.post('/projects/'+project.id+'/project_deliverables.json',{project_deliverable:deliverable})
      else
        promise = $http.put('/projects/'+project.id+'/project_deliverables/'+deliverable.id+'.json',{project_deliverable:deliverable})
      promise

    toggleClose: (project) ->
      svc = @
      project.saving = true
      promise = $http.put('/projects/'+project.id+'/toggle_close.json')
      handleProjectSave svc, project, promise

    removeProjectSet: (project, projectSet) ->
      svc = @
      project.saving = true
      promise = $http.delete('/projects/'+project.id+'/remove_project_set/'+projectSet.name)
      handleProjectSave svc, project, promise

    addProjectSet: (project,projectSetName) ->
      svc = @
      project.saving = true
      promise = $http.post('/projects/'+project.id+'/add_project_set/'+projectSetName)
      handleProjectSave svc, project, promise

    # get deliverables for index page by user
    getDeliverables: (layout) ->
      svc = @
      svc.loadingMessage = "Loading..."
      p = $http.get('/project_deliverables.json?layout='+layout)
      p.success () ->
        svc.loadingMessage = null
      p.error () ->
        svc.loadingMessage = null
  }
]
projectApp.filter 'deliverableSort', [() ->
  (deliverables) ->
    r = if deliverables then deliverables.slice(0) else []
    r.sort (a,b) ->
      x = 0
      
      a_pn = (if a.project_name then a.project_name else '')
      b_pn = (if b.project_name then b.project_name else '')
      if a_pn == b_pn
        x = 0
      else if a_pn < b_pn
        return -1
      else
        return 1

      # sort by complete status
      a_comp = (if a.complete then 1 else 0)
      b_comp = (if b.complete then 1 else 0)
      x = a_comp - b_comp
      return x unless x==0

      # sort by due duate
      a_due = (if a.due_date then new Date(a.due_date) else new Date(2999,1,1))
      b_due = (if b.due_date then new Date(b.due_date) else new Date(2999,1,1))
      x = a_due.getTime() - b_due.getTime()
      return x unless x==0

      # sort by id
      a_id = if a.id then a.id else 999999
      b_id = if b.id then b.id else 999998
      x = a_id - b_id
      return x

]
projectApp.directive 'chainProjectDeliverable', ['$compile','projectSvc',($compile,projectSvc) ->
  {
    restrict:'A'
    scope:{
      deliverable:'=chainProjectDeliverable',
      project:'='
    }
    templateUrl:'<%=asset_path("chain_project_deliverable.html")%>'
    link: (scope,el,attrs) ->
      editAction = () ->
        projectSvc.deliverableToEdit = scope.deliverable
        $('chain-project-deliverable-edit').find('div.modal').modal('show')
        $('chain-project-deliverable-edit').find('input[ng-model$=".description"]').focus()

      appEl = $(el).parents('div[ng-controller]')
      if appEl.find('chain-project-deliverable-edit').length == 0
        scp = if appEl == true then appEl.scope() else el.scope().$root #conceit for unit testing where there is no outer controller
        angEl = angular.element('<chain-project-deliverable-edit save-promise-callback="'+$(el).attr('save-promise-callback')+'"></chain-project-deliverable-edit>')
        appEl.append($compile(angEl)(scp)) #add the deliverable on the parent scope
      $(el).find('button.deliverable-edit').on 'click', () ->
        scope.$apply editAction

      scope.late = () ->
        scope.deliverable && !scope.deliverable.complete && scope.deliverable.due_date && moment(scope.deliverable.due_date) < moment()

      editAction() if scope.deliverable.new

  }
]
projectApp.directive 'chainProjectDeliverableEdit', ['projectSvc',(projectSvc) ->
  {
    restrict:'E'
    scope:{
      savePromiseCallback:'='
    }
    templateUrl:'<%=asset_path("chain_project_deliverable_edit.html")%>'
    link: (scope,el,attrs) ->
      scope.svc = projectSvc
      scope.errors = {errorMessage:null}
      scope.saveDeliverable = () ->
        scope.errors.errorMessage = null
        d = projectSvc.deliverableToEdit
        proj = {id:d.project_id}
        p = projectSvc.saveDeliverable(proj, projectSvc.deliverableToEdit)
        scope.savePromiseCallback p
        p.success (data, status, headers, config) ->
          projectSvc.deliverableToEdit = null
          $(el).find('div.modal').modal('hide')
        p.error (data, status, headers, config) ->
          d.saving = null
          scope.errors.errorMessage = data.error
  }
  
]
projectApp.controller 'ProjectDeliverablesController', ['$scope','projectSvc',($scope,projectSvc) ->
  #add required project attributes
  prepDeliverable = (d) ->
    d.project = {id:d.project_id,name:d.project_name}

  $scope.svc = projectSvc

  $scope.loadDeliverables = (layout) ->
    $scope.deliverables = null
    projectSvc.getDeliverables(layout).then (resp) ->
      $scope.deliverables = resp.data.deliverables_by_user
      for u, projects of $scope.deliverables
        for pname, dels of projects
          prepDeliverable d for d in dels


  $scope.loadDeliverables 'person'

  $scope.handleSaveDeliverable = (promise) ->
    goodCallback = (resp) ->
      deliverable = resp.data.project_deliverable
      prepDeliverable deliverable
      for u, dels of $scope.deliverables
        for d, i in dels
          if d.id == deliverable.id
           dels[i] = deliverable
           return
      return
    promise.then goodCallback
]
projectApp.controller 'ProjectCtrl', ['$scope','projectSvc','userListCache',($scope,projectSvc,userListCache) ->
  $scope.addUpdateBody = ''
  $scope.svc = projectSvc
  $scope.users = []
  userListCache.getListForCurrentUser (userList) ->
    $scope.users = userList

  $scope.saveProject = () ->
    projectSvc.saveProject projectSvc.project
  $scope.toggleClose = () ->
    projectSvc.toggleClose projectSvc.project
  $scope.addProjectUpdate = () ->
    projectSvc.addProjectUpdate projectSvc.project, $scope.addUpdateBody
    $scope.addUpdateBody = ''
  $scope.editProjectUpdate = (u) ->
    projectSvc.editProjectUpdate projectSvc.project, u
  $scope.addDeliverable = () ->
    projectSvc.project.project_deliverables.push {new:true,project_id:projectSvc.project.id}
  $scope.handleSaveDeliverable = (p) ->
    goodCallback = (resp) ->
      project = projectSvc.project
      del = resp.data.project_deliverable
      project.project_deliverables ?= []
      for pd, i in project.project_deliverables
        project.project_deliverables[i] = del if pd.new || pd.id == del.id
    p.then goodCallback

  $scope.removeProjectSet = (ps) ->
    projectSvc.removeProjectSet projectSvc.project, ps
  $scope.addProjectSet = () ->
    toAdd = $scope.projectSetToAdd
    $scope.projectSetToAdd = undefined
    $scope.projectSetAdd = false
    projectSvc.addProjectSet projectSvc.project, toAdd

  $scope.unloadWarning = () ->
    return "You have not added your update." if $scope.addUpdateBody.length > 0
    return undefined

  $scope.svc.load $scope.projectId if $scope.projectId
]
