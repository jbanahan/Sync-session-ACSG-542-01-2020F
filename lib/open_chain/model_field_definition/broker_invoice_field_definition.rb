module OpenChain; module ModelFieldDefinition; module BrokerInvoiceFieldDefinition
  def add_broker_invoice_fields
    add_fields CoreModule::BROKER_INVOICE, [
      make_broker_invoice_entry_field(1,:bi_brok_ref,:broker_reference,"Broker Reference",:string,lambda {|entry| entry.broker_reference}),
      [2,:bi_suffix,:suffix,"Suffix",:data_type=>:string],
      [3,:bi_invoice_date,:invoice_date,"Invoice Date",:data_type=>:date],
      [4,:bi_invoice_total,:invoice_total,"Total",:data_type=>:decimal],
      [5,:bi_customer_number,:customer_number,"Customer Number",:data_type=>:string],
      [6,:bi_to_name,:bill_to_name,"Bill To Name",:data_type=>:string],
      [7,:bi_to_add1,:bill_to_address_1,"Bill To Address 1",:data_type=>:string],
      [8,:bi_to_add2,:bill_to_address_2,"Bill To Address 2",:data_type=>:string],
      [9,:bi_to_city,:bill_to_city,"Bill To City",:data_type=>:string],
      [10,:bi_to_state,:bill_to_state,"Bill To State",:data_type=>:string],
      [11,:bi_to_zip,:bill_to_zip,"Bill To Zip",:data_type=>:string],
      make_broker_invoice_entry_field(12,:bi_entry_num,:entry_number,"Entry Number",:string,lambda {|entry| entry.entry_number}),
      make_broker_invoice_entry_field(13,:bi_release_date,:release_date,"Release Date",:datetime,lambda {|entry| entry.release_date}),
      [14,:bi_to_country_iso,:iso_code,"Bill To Country Code",{:data_type=>:string,
        :import_lambda=> lambda {|inv,data|
          cntry = Country.find_by_iso_code data
          return "Country with ISO code #{data} could not be found." unless cntry
          inv.bill_to_country_id = cntry.id
          "Bill to Country set to #{data}"
        },
        :export_lambda=> lambda {|inv| inv.bill_to_country_id.blank? ? "" : inv.bill_to_country.iso_code},
        :qualified_field_name => "(SELECT iso_code FROM countries WHERE countries.id = broker_invoices.bill_to_country_id)"
      }],
      make_broker_invoice_entry_field(15,:bi_mbols,:master_bills_of_lading,"Master Bills",:text,lambda {|entry| entry.master_bills_of_lading}),
      make_broker_invoice_entry_field(16,:bi_hbols,:house_bills_of_lading,"House Bills",:text,lambda {|entry| entry.house_bills_of_lading}),
      make_broker_invoice_entry_field(17,:bi_sbols,:sub_house_bills_of_lading,"Sub House Bills",:text,lambda {|entry| entry.sub_house_bills_of_lading}),
      make_broker_invoice_entry_field(18,:bi_it_numbers,:it_numbers,"IT Numbers",:text,lambda {|entry| entry.it_numbers}),
      make_broker_invoice_entry_field(19,:bi_duty_due_date,:duty_due_date,"Duty Due Date",:date,lambda {|entry| entry.duty_due_date},lambda {|u| u.company.broker?}),
      make_broker_invoice_entry_field(20,:bi_carrier_code,:carrier_code,"Carrier Code",:string,lambda {|entry| entry.carrier_code}),
      make_broker_invoice_entry_field(21,:bi_total_packages,:total_packages,"Total Packages",:integer,lambda {|entry| entry.total_packages}),
      make_broker_invoice_entry_field(22,:bi_total_fees,:total_fees,"Total Fees",:decimal,lambda {|entry| entry.total_fees}),
      make_broker_invoice_entry_field(25, :bi_ent_total_duty, :total_duty, "Total Duty", :decimal, lambda {|entry| entry.total_duty}),
      make_broker_invoice_entry_field(26, :bi_ent_total_duty_direct, :total_duty_direct, "Total Duty Direct", :decimal, lambda {|entry| entry.total_duty_direct}),
      make_broker_invoice_entry_field(27, :bi_ent_entered_value, :entered_value, "Total Entered Value", :decimal, lambda {|entry| entry.entered_value}),
      make_broker_invoice_entry_field(28, :bi_ent_customer_references, :customer_references, "Customer References", :text, lambda {|entry| entry.customer_references}),
      make_broker_invoice_entry_field(29,:bi_ent_po_numbers,:po_numbers,"PO Numbers",:text,lambda {|entry| entry.po_numbers}),
      make_broker_invoice_entry_field(30,:bi_ent_mfids,:mfids,"MID Numbers",:text,lambda {|entry| entry.mfids}),
      make_broker_invoice_entry_field(31,:bi_ent_total_invoiced_value,:total_invoiced_value,"Total Commercial Invoice Value",:decimal,lambda {|entry| entry.total_invoiced_value}),
      make_broker_invoice_entry_field(32,:bi_ent_export_country_codes,:export_country_codes,"Country of Export Codes",:string,lambda {|entry| entry.export_country_codes}),
      make_broker_invoice_entry_field(33,:bi_ent_origin_country_codes,:origin_country_codes,"Country of Origin Codes",:string,lambda {|entry| entry.origin_country_codes}),
      make_broker_invoice_entry_field(34,:bi_ent_vendor_names,:vendor_names,"Vendor Names",:text,lambda {|entry| entry.vendor_names}),
      make_broker_invoice_entry_field(35,:bi_ent_spis,:special_program_indicators,"SPI(s),",:string,lambda {|entry| entry.special_program_indicators}),
      make_broker_invoice_entry_field(36,:bi_ent_export_date,:export_date,"Export Date",:date,lambda {|entry| entry.export_date}),
      make_broker_invoice_entry_field(37,:bi_ent_merch_desc,:merchandise_description,"Merchandise Description",:string,lambda {|entry| entry.merchandise_description}),
      make_broker_invoice_entry_field(38,:bi_ent_transport_mode_code,:transport_mode_code,"Mode of Transport",:string,lambda {|entry| entry.transport_mode_code}),
      make_broker_invoice_entry_field(39,:bi_ent_total_units,:total_units,"Total Units",:decimal,lambda {|entry| entry.total_units}),
      make_broker_invoice_entry_field(40,:bi_ent_total_units_uoms,:total_units_uoms,"Total Units UOMs",:string,lambda {|entry| entry.total_units_uoms}),
      make_broker_invoice_entry_field(41,:bi_ent_entry_port_code,:entry_port_code,"Port of Entry Code",:string,lambda {|entry| entry.entry_port_code}),
      make_broker_invoice_entry_field(42,:bi_ent_ult_con_code,:ult_consignee_code,"Ult Consignee Code",:string,lambda {|entry| entry.ult_consignee_code}),
      make_broker_invoice_entry_field(43,:bi_ent_ult_con_name,:ult_consignee_name,"Ult Consignee Name",:string,lambda {|entry| entry.ult_consignee_name}),
      make_broker_invoice_entry_field(44,:bi_ent_gross_weight,:gross_weight,"Gross Weight",:integer,lambda {|entry| entry.gross_weight}),
      make_broker_invoice_entry_field(45,:bi_ent_total_packages_uom,:total_packages_uom,"Total Packages UOM",:string,lambda {|entry| entry.total_packages_uom}),
      make_broker_invoice_entry_field(46,:bi_ent_cotton_fee,:cotton_fee,"Cotton Fee",:decimal,lambda {|entry| entry.cotton_fee}),
      make_broker_invoice_entry_field(47,:bi_ent_hmf,:hmf,"HMF",:decimal,lambda {|entry| entry.hmf}),
      make_broker_invoice_entry_field(48,:bi_ent_mpf,:mpf,"MPF",:decimal,lambda {|entry| entry.mpf}),
      make_broker_invoice_entry_field(49,:bi_ent_container_numbers,:container_numbers,"Container Numbers",:text,lambda {|entry| entry.container_numbers}),
      [50,:bi_currency,:currency,"Currency",{:data_type=>:decimal}],
      make_broker_invoice_entry_field(51,:bi_ent_importer_tax_id,:importer_tax_id,"Importer Tax ID",:string,lambda {|entry| entry.importer_tax_id}),
      make_broker_invoice_entry_field(52,:bi_destination_state,:destination_state,"Destination State",:string,lambda {|entry| entry.destination_state}),
      make_broker_invoice_entry_field(53,:bi_container_sizes,:container_sizes,"Container Sizes",:string,lambda {|entry| entry.container_sizes}),
      [54,:bi_lading_port_name,:name,"Port of Lading Name",{
        :data_type=>:string,
        :import_lambda => lambda {|inv,data| "Port of Lading cannot be set via invoice upload."},
        :export_lambda => lambda {|inv| (inv.entry.blank? || inv.entry.lading_port.blank?) ? "" : inv.entry.lading_port.name},
        :qualified_field_name => "(SELECT name from ports where schedule_k_code = (select lading_port_code from entries where entries.id = broker_invoices.entry_id))"
      }],
      make_broker_invoice_entry_field(55,:bi_cargo_control_number,:cargo_control_number,"Cargo Control Number",:string, lambda{|entry| entry.cargo_control_number}),
      [56,:bi_invoice_number,:invoice_number,"Invoice Number",{:data_type=>:string}],
      [57,:bi_source_system,:source_system,"Source System",{:data_type=>:string,:can_view_lambda=>lambda {|u| u.company.broker?}}],
      make_broker_invoice_entry_field(58,:bi_ent_part_numbers,:part_numbers,"Part Numbers",:text,lambda {|entry| entry.part_numbers}),
      make_broker_invoice_entry_field(59,:bi_ent_commercial_invoice_numbers,:commercial_invoice_numbers,"Commercial Invoice Numbers",:text,lambda {|entry| entry.commercial_invoice_numbers}),
      make_broker_invoice_entry_field(60,:bi_ent_total_gst, :total_gst, "Total GST", :decimal, lambda {|entry| entry.total_gst}),
      make_broker_invoice_entry_field(61,:bi_ent_total_duty_gst, :total_duty_gst, "Total Duty & GST", :decimal, lambda {|entry| entry.total_duty_gst}),
      make_broker_invoice_entry_field(62,:bi_ent_direct_shipment_date, :direct_shipment_date, "Direct Shipment Date", :date, lambda {|entry| entry.direct_shipment_date}),
      make_broker_invoice_entry_field(63,:bi_ent_across_sent_date, :across_sent_date, "ACROSS Sent Date", :datetime, lambda {|entry| entry.across_sent_date}),
      make_broker_invoice_entry_field(64,:bi_ent_pars_ack_date, :pars_ack_date, "PARS ACK Date", :datetime, lambda {|entry| entry.pars_ack_date}),
      make_broker_invoice_entry_field(65,:bi_ent_cadex_accept_date, :cadex_accept_date, "CADEX Accept Date", :datetime, lambda {|entry| entry.cadex_accept_date}),
      make_broker_invoice_entry_field(66,:bi_ent_cadex_sent_date, :cadex_sent_date, "CADEX Sent Date", :datetime, lambda {|entry| entry.cadex_sent_date}),
      make_broker_invoice_entry_field(67,:bi_ent_k84_month, :k84_month, "K84 Month", :integer, lambda {|entry| entry.k84_month}),
      make_broker_invoice_entry_field(68,:bi_ent_exam_ordered_date, :exam_ordered_date, "Exam Ordered Date", :datetime, lambda {|entry| entry.exam_ordered_date}),
      make_broker_invoice_entry_field(69,:bi_ent_fda_transmit_date, :fda_transmit_date, "FDA Transmit Date", :datetime, lambda {|entry| entry.fda_transmit_date}),
      make_broker_invoice_entry_field(70,:bi_ent_entry_filed_date, :entry_filed_date, "Entry Filed Date", :datetime, lambda {|entry| entry.entry_filed_date}),
      make_broker_invoice_entry_field(71,:bi_ent_trucker_called_date, :trucker_called_date, "Trucker Called Date", :datetime, lambda {|entry| entry.trucker_called_date})

    ]
  end
end; end; end;
