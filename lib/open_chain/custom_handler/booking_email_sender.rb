require 'open_chain/custom_handler/booking_spreadsheet_generator'
require 'open_chain/create_zip_support'

module OpenChain; module CustomHandler; class BookingEmailSender
  extend OpenChain::CreateZipSupport

  def self.send_email message_type, user, shipment, shipment_lines
    forwarder = shipment.forwarder
    raise "Shipment #{shipment.reference} does not have a forwarder associated with it." unless forwarder
    email_to = User.where(username: "OriginDocs", company_id: forwarder.id).first
    raise "Forwarder company #{forwarder.name} must have a user with a username 'OriginDocs' added to it with a valid email address." if email_to.nil? || email_to.email.blank?

    OpenChain::CustomHandler::BookingSpreadsheetGenerator.generate(user, shipment, shipment_lines) do |booking_file|
      attachments = shipment.attachments.all

      if attachments.size > 0
        zip_attachments(Attachment.get_sanitized_filename("#{shipment.reference}.zip"), attachments) do |tempfile|
          email(message_type, user, shipment, shipment_lines, email_to, [booking_file, tempfile])
        end
      else
        email(message_type, user, shipment, shipment_lines, email_to, [booking_file])
      end
      
    end
  end

  private 
    def self.email message_type, user, shipment, shipment_lines, email_to, attachments
      subject = "#{message_type} - #{shipment.reference}"
      if shipment.first_port_receipt
        subject += " - #{shipment.first_port_receipt.name}"
      end

      vendor_info = OpenChain::CustomHandler::BookingSpreadsheetGenerator.shipment_vendor_info(shipment_lines)
      if vendor_info[:vendor]
        subject += " - #{vendor_info[:vendor].name}"
      end

      body = "This message was automatically generated by https://#{MasterSetup.get.request_host} on behalf of #{user.full_name} (#{user.email})."
      OpenMailer.send_simple_html(email_to.email, subject, body, attachments, reply_to: user.email).deliver!
    end

end; end; end;