describe OpenChain::CustomHandler::Talbots::TalbotsLandedCostComparator do
  subject { described_class }
  let(:ent) { create(:entry, entry_number: "ENTNUM", importer: co, last_billed_date: DateTime.now)}
  let(:co) { with_customs_management_id(create(:company), "TALBO") }
  let(:es) { create(:entity_snapshot, recordable: ent) }

  describe "accept?" do
    it "accepts Talbots entries" do
      expect(subject.accept? es).to eq true
    end

    it "rejects non-entries" do
      es.update_attributes(recordable: create(:product))
      expect(subject.accept? es).to eq false
    end

    it "rejects non-Talbots entries" do
      co.system_identifiers.destroy_all
      expect(subject.accept? es).to eq false
    end

    it "rejects uninvoiced entries" do
      ent.update_attributes! last_billed_date: nil
      expect(subject.accept? es).to eq false
    end
  end

  describe "compare" do
    let(:lc_hsh) { double "landed cost hash" }
    let(:wb) { XlsMaker.create_workbook "wb" }
    let!(:att) { create(:attachment, checksum: "checksum FOO", attachment_type: "Landed Cost Report", attachable: ent) }
    let!(:u) do
      grp = create(:group, system_code: "TALBOTS LC REPORT")
      create(:user, email: "tufnel@stonehenge.biz", groups: [grp])
    end

    it "does nothing if entry not present" do
      ent.destroy
      expect_any_instance_of(OpenChain::Report::LandedCostReport).to_not receive(:create_report)
      subject.compare "Entry", 1, "old_bucket", "old_path", "old ver", "new bucket", "new path", "new ver"
    end

    context "landed cost has changed" do
      before { expect_any_instance_of(OpenChain::Report::LandedCostDataGenerator).to receive(:landed_cost_data_for_entry).with(ent).and_return lc_hsh }
      let(:now) { DateTime.new(2017, 3, 15, 15, 30) }

      it "adds attachment to entry and sends email" do
        # old and new attachments have same checksum but different types
        att.update_attributes! attachment_type: "Foo type"
        expect_any_instance_of(OpenChain::Events::EntryEvents::LandedCostReportAttacherListener).to receive(:calculate_landed_cost_checksum_v3).with(lc_hsh).and_return "checksum FOO"
        expect_any_instance_of(OpenChain::Report::LandedCostReport).to receive(:create_report).with(entry_hashes: lc_hsh).and_return wb
        expect_any_instance_of(Entry).to receive(:create_snapshot).with(User.integration, nil, "Talbots Landed Cost Comparator")

        Timecop.freeze(now) { subject.compare "Entry", ent.id, "old_bucket", "old_path", "old ver", "new bucket", "new path", "new ver" }

        expect(ent.attachments.length).to eq 2
        att2 = ent.attachments.last
        expect(att2.checksum).to eq "checksum FOO"
        expect(att2.attachment_type).to eq "Landed Cost Report"
        expect(att2.attached_file_name).to eq "Talbots_Landed_Cost_Report_ENTNUM.xls"

        mail = ActionMailer::Base.deliveries.pop
        expect(mail.to).to eq ["tufnel@stonehenge.biz"]
        expect(mail.subject).to eq "Talbots Landed Cost Report for Entry: ENTNUM"
        expect(mail.body.raw_source).to match(/The Talbots Landed Cost Report for ENTNUM was generated by VFI Track on 03-15-2017 11:30./)
        expect(mail.attachments.size).to eq 1
        expect(att2.alliance_revision).to be_nil
        expect(mail.attachments["Talbots_Landed_Cost_Report_ENTNUM.xls"]).not_to be_nil
      end

      it "adds revision number if necessary, delete previous version" do
        expect_any_instance_of(OpenChain::Events::EntryEvents::LandedCostReportAttacherListener).to receive(:calculate_landed_cost_checksum_v3).with(lc_hsh).and_return "checksum BAR"
        expect_any_instance_of(OpenChain::Report::LandedCostReport).to receive(:create_report).with(entry_hashes: lc_hsh).and_return wb
        expect_any_instance_of(Entry).to receive(:create_snapshot).with(User.integration, nil, "Talbots Landed Cost Comparator")

        Timecop.freeze(now) { subject.compare "Entry", ent.id, "old_bucket", "old_path", "old ver", "new bucket", "new path", "new ver" }

        expect(ent.attachments.length).to eq 1
        att2 = ent.attachments.first
        expect(att2.checksum).to eq "checksum BAR"
        expect(att2.attachment_type).to eq "Landed Cost Report"
        expect(att2.alliance_revision).to eq 1
        expect(att2.attached_file_name).to eq "Talbots_Landed_Cost_Report_ENTNUM_rev1.xls"

        mail = ActionMailer::Base.deliveries.pop
        expect(mail.to).to eq ["tufnel@stonehenge.biz"]
        expect(mail.subject).to eq "Talbots Landed Cost Report for Entry: ENTNUM rev 1"
        expect(mail.body.raw_source).to match(/The Talbots Landed Cost Report for ENTNUM rev 1 was generated by VFI Track on 03-15-2017 11:30./)
        expect(mail.attachments.size).to eq 1
        expect(mail.attachments["Talbots_Landed_Cost_Report_ENTNUM_rev1.xls"]).not_to be_nil
      end
    end

    context "no change in landed cost" do
      before { expect_any_instance_of(OpenChain::Report::LandedCostDataGenerator).to receive(:landed_cost_data_for_entry).with(ent).and_return lc_hsh }

      it "does nothing " do
        expect_any_instance_of(OpenChain::Events::EntryEvents::LandedCostReportAttacherListener).to receive(:calculate_landed_cost_checksum_v3).with(lc_hsh).and_return "checksum FOO"
        expect_any_instance_of(OpenChain::Report::LandedCostReport).to_not receive(:create_report)
        expect_any_instance_of(Entry).to_not receive(:create_snapshot).with(User.integration, nil, "Talbots Landed Cost Comparator")

        subject.compare "Entry", ent.id, "old_bucket", "old_path", "old ver", "new bucket", "new path", "new ver"

        expect(ent.attachments.length).to eq 1
        expect(ActionMailer::Base.deliveries.pop).to be_nil
      end
    end

  end
end